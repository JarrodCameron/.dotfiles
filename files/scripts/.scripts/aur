#!/usr/bin/env bash

# Author: Jarrod Cameron (z5210220)
# Date:   25/11/19 10:29

# A script for probing the aur. My shell scripting sucks so good luck
# to whoever reads this.

CACHE_DIR="$HOME"'/.cache/aur/'
PKG_LIST="$CACHE_DIR"'packages'
AUR_LIST_URI='https://aur.archlinux.org/packages.gz'
AUR_PKG_BASE='https://aur.archlinux.org'
DEFAULT_PROG='prog'
PROG_NAME="$0"

# Run the fuzzy finder on the input passed via stdin
function fuzzy_run () {
    IFS=''
    while read line
    do
        printf "%s\n" "$line"
    done | fzf --layout=reverse --margin=3 \
            --header="pwd: $(pwd)" --inline-info --cycle
}

# Print the usage of the program
function usage () {
    printf 'Usage: aur <cmd> [args...]\n'
    printf ' -h, --help         Print help and exit\n'
    printf ' -ua, --update-all  Update the list of packages\n'
    printf ' -l, --list         List all available packages\n'
    printf ' -i, --install      Install package from the AUR\n'
    printf '\n'
    sed '/^#/!d ; s/^# //g' ~/.cache/aur/packages
}

# Update the description for the "name" of the package
function do_update_desc () {
    local name="$1"
    local temp_json="$(mktemp --suffix=.json)"
    curl 'https://aur.archlinux.org/rpc/?v=5&type=search&arg='"$name" --output "$temp_json"
    local range="$(jq '.results | length-1' "$temp_json")"
    for index in $(seq 0 "$range")
    do
        local result_name="$(jq '.results['"$index"'].Name' -r "$temp_json")"
        local result_path="$CACHE_DIR"'desc/'"$result_name"
        if [ ! -e "$result_path" ]; then
            jq '.results['"$index"']' "$temp_json" > "$result_path"
        fi
    done
    rm -f "$temp_json"
}

# Update the database of aur packages
function update_all () {
    rm -rf "$CACHE_DIR"'packages'
    mkdir -p "$CACHE_DIR"
    curl "$AUR_LIST_URI" --output "$CACHE_DIR"'/packages.gz'
    if [ ! -e "$CACHE_DIR"'/packages.gz' ]; then
        printf "Package list could not be downloaded\n"
        exit 1
    fi
    gunzip "$CACHE_DIR"'/packages.gz'
}

# List all of the possible packages to the user
function list_cmd () {
    local hint="$1"
    if [ -z "$hint" ]; then
        sed '/^#/d' "$PKG_LIST" | sort | less
    else
        sed '/^#/d ; /'"$hint"'/!d' "$PKG_LIST" | sort | less
    fi
}

# Simply download the program into '$DEFAULT_PROG'.tar.gz'
function download_prog () {
    local prog_path="$1"
    local temp_dir="$2"
    local output="$temp_dir"'/'$DEFAULT_PROG'.tar.gz'
    curl "$AUR_PKG_BASE""$prog_path" --output "$output"
}

# Install the program, ask user for permission
function do_install () {
    vim -R 'PKGBUILD'

    local input=''

    printf "/----------------------------------\\\\\n"
    printf "| Would you like to install? [y/n] |\n"
    printf "\\----------------------------------/\n"

    printf "Input: "
    read input
    if [ -z "$input" ] || [ "$input" = 'y' ]; then
        makepkg -sic
    else
        printf 'Installation cancled\n'
    fi
}

# Install the actual program
function install_prog () {
    local prog_name="$1"
    local temp_dir="$(mktemp -d)"

    if [ ! -e "$CACHE_DIR"'desc/'"$prog_name" ]; then
        do_update_desc "$prog_name"
    fi

    prog_path="$(jq -r '.URLPath' "$CACHE_DIR"'desc/'"$prog_name")"

    download_prog "$prog_path" "$temp_dir"

    cd "$temp_dir"
    gunzip "$DEFAULT_PROG"'.tar.gz'
    tar -xvf "$DEFAULT_PROG"'.tar' >/dev/null

    printf 'Temp dir: %s\n' "$temp_dir"

    cd "$prog_name"
    do_install
}

# Install the desired package
function install_cmd () {
    local user_prog="$1"
    local prog_name=''
    if [ -z "$user_prog" ]; then
        prog_name="$(sed '/^#/d' "$PKG_LIST" | fuzzy_run)"
    else
        nitems="$(grep -i "$user_prog" "$PKG_LIST" | wc -l)"
        if [ "$nitems" = "0" ]; then
            printf "Item \"%s\" does not exist\n", "$user_prog"
            printf "Use \`\`aur -l'' to see all items\n"
            exit 1
        elif [ "$nitems" = "1" ]; then
            prog_name="$(grep -i "$user_prog" "$PKG_LIST")"
        else
            prog_name="$(sed '/^#/d ; /'"$user_prog"'/!d' "$PKG_LIST" | fuzzy_run)"
        fi
    fi

    if [ -z "$prog_name" ]; then
        printf "Error: Package does not exist\n"
        exit 1
    fi

    install_prog "$prog_name"
}

# Download the .tar.gz file and exit
function download_cmd () {
    true
# TODO
}

cmd="$1"

shift
args="$*"

case "$cmd" in

    '-h'|'--help')          usage "$args" ;;
    '-ua'|'--update-all')   update_all "$args" ;;
    '-l'|'--list')          list_cmd "$args" ;;
    '-i'|'--install')       install_cmd "$args" ;;
    '-d'|'--download')      download_cmd "$args" ;;
    *)                      usage "$args" >&2 ;;
esac

exit 0
