#!/bin/python3

import collections
import sys
from abc import ABC
from colorama import *

'''
From the colorama docs:
    Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
    Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
    Style: DIM, NORMAL, BRIGHT, RESET_ALL
'''

class SystemCall(ABC):
    pass

class SystemCall32(SystemCall):
    def __init__(self, name, eax, ebx="null", ecx="null", edx="null", esi="null", edi="null"):
        self.state = {}
        self.state["name"] = name
        self.state["eax"] = hex(eax)
        self.state["ebx"] = ebx
        self.state["ecx"] = ecx
        self.state["edx"] = edx
        self.state["esi"] = esi
        self.state["edi"] = edi

    def get_name(self):
        return self.state["name"]

    def __str__(self):
        retval = ''
        for k, v in self.state.items():
            retval += Style.BRIGHT
            retval += Fore.MAGENTA
            retval += k
            retval += Fore.CYAN
            retval += ' --> '
            retval += Fore.BLUE
            if v == 'null':
                retval += Style.DIM
            retval += v
            retval += Style.RESET_ALL
            retval += '\n'
        return retval

class SystemCall64(SystemCall):
    def __init__(self, name, rax, rdi="null", rsi="null", rdx="null", r10="null", r8="null", r9="null"):
        self.state = {}
        self.state["name"] = name
        self.state["rax"] = hex(rax)
        self.state["rdi"] = rdi
        self.state["rsi"] = rsi
        self.state["rdx"] = rdx
        self.state["r10"] = r10
        self.state["r8"] = r8
        self.state["r9"] = r9

    def get_name(self):
        return self.state["name"]

    def __str__(self):
        retval = ''
        for k, v in self.state.items():
            retval += Style.BRIGHT
            retval += Fore.MAGENTA
            retval += k
            retval += Fore.CYAN
            retval += ' --> '
            retval += Fore.BLUE
            if v == 'null':
                retval += Style.DIM
            retval += v
            retval += Style.RESET_ALL
            retval += '\n'
        return retval

queue = collections.deque()

queue.append(SystemCall32("sys_exit", 0x01, "int error_code"))
queue.append(SystemCall32("sys_fork", 0x02, "struct pt_regs *"))
queue.append(SystemCall32("sys_read", 0x03, "unsigned int fd", "char __user *buf", "size_t count"))
queue.append(SystemCall32("sys_write", 0x04, "unsigned int fd", "const char __user *buf", "size_t count"))
queue.append(SystemCall32("sys_open", 0x05, "const char __user *filename", "int flags", "int mode"))
queue.append(SystemCall32("sys_close", 0x06, "unsigned int fd"))
queue.append(SystemCall32("sys_waitpid", 0x07, "pid_t pid", "int __user *stat_addr", "int options"))
queue.append(SystemCall32("sys_creat", 0x08, "const char __user *pathname", "int mode"))
queue.append(SystemCall32("sys_link", 0x09, "const char __user *oldname", "const char __user *newname"))
queue.append(SystemCall32("sys_unlink", 0x0a, "const char __user *pathname"))
queue.append(SystemCall32("sys_execve", 0x0b, "char __user *", "char __user *__user *", "char __user *__user *", "struct pt_regs *"))
queue.append(SystemCall32("sys_chdir", 0x0c, "const char __user *filename"))
queue.append(SystemCall32("sys_time", 0x0d, "time_t __user *tloc"))
queue.append(SystemCall32("sys_mknod", 0x0e, "const char __user *filename", "int mode", "unsigned dev"))
queue.append(SystemCall32("sys_chmod", 0x0f, "const char __user *filename", "mode_t mode"))
queue.append(SystemCall32("sys_lchown16", 0x10, "const char __user *filename", "old_uid_t user", "old_gid_t group"))
queue.append(SystemCall32("sys_stat", 0x12, "char __user *filename", "struct __old_kernel_stat __user *statbuf"))
queue.append(SystemCall32("sys_lseek", 0x13, "unsigned int fd", "off_t offset", "unsigned int origin"))
queue.append(SystemCall32("sys_getpid", 0x14))
queue.append(SystemCall32("sys_mount", 0x15, "char __user *dev_name", "char __user *dir_name", "char __user *type", "unsigned long flags", "void __user *data"))
queue.append(SystemCall32("sys_oldumount", 0x16, "char __user *name"))
queue.append(SystemCall32("sys_setuid16", 0x17, "old_uid_t uid"))
queue.append(SystemCall32("sys_getuid16", 0x18))
queue.append(SystemCall32("sys_stime", 0x19, "time_t __user *tptr"))
queue.append(SystemCall32("sys_ptrace", 0x1a, "long request", "long pid", "long addr", "long data"))
queue.append(SystemCall32("sys_alarm", 0x1b, "unsigned int seconds"))
queue.append(SystemCall32("sys_fstat", 0x1c, "unsigned int fd", "struct __old_kernel_stat __user *statbuf"))
queue.append(SystemCall32("sys_pause", 0x1d))
queue.append(SystemCall32("sys_utime", 0x1e, "char __user *filename", "struct utimbuf __user *times"))
queue.append(SystemCall32("sys_access", 0x21, "const char __user *filename", "int mode"))
queue.append(SystemCall32("sys_nice", 0x22, "int increment"))
queue.append(SystemCall32("sys_sync", 0x24))
queue.append(SystemCall32("sys_kill", 0x25, "int pid", "int sig"))
queue.append(SystemCall32("sys_rename", 0x26, "const char __user *oldname", "const char __user *newname"))
queue.append(SystemCall32("sys_mkdir", 0x27, "const char __user *pathname", "int mode"))
queue.append(SystemCall32("sys_rmdir", 0x28, "const char __user *pathname"))
queue.append(SystemCall32("sys_dup", 0x29, "unsigned int fildes"))
queue.append(SystemCall32("sys_pipe", 0x2a, "int __user *fildes"))
queue.append(SystemCall32("sys_times", 0x2b, "struct tms __user *tbuf"))
queue.append(SystemCall32("sys_brk", 0x2d, "unsigned long brk"))
queue.append(SystemCall32("sys_setgid16", 0x2e, "old_gid_t gid"))
queue.append(SystemCall32("sys_getgid16", 0x2f))
queue.append(SystemCall32("sys_signal", 0x30, "int sig", "__sighandler_t handler"))
queue.append(SystemCall32("sys_geteuid16", 0x31))
queue.append(SystemCall32("sys_getegid16", 0x32))
queue.append(SystemCall32("sys_acct", 0x33, "const char __user *name"))
queue.append(SystemCall32("sys_umount", 0x34, "char __user *name", "int flags"))
queue.append(SystemCall32("sys_ioctl", 0x36, "unsigned int fd", "unsigned int cmd", "unsigned long arg"))
queue.append(SystemCall32("sys_fcntl", 0x37, "unsigned int fd", "unsigned int cmd", "unsigned long arg"))
queue.append(SystemCall32("sys_setpgid", 0x39, "pid_t pid", "pid_t pgid"))
queue.append(SystemCall32("sys_olduname", 0x3b, "struct oldold_utsname __user *"))
queue.append(SystemCall32("sys_umask", 0x3c, "int mask"))
queue.append(SystemCall32("sys_chroot", 0x3d, "const char __user *filename"))
queue.append(SystemCall32("sys_ustat", 0x3e, "unsigned dev", "struct ustat __user *ubuf"))
queue.append(SystemCall32("sys_dup2", 0x3f, "unsigned int oldfd", "unsigned int newfd"))
queue.append(SystemCall32("sys_getppid", 0x40))
queue.append(SystemCall32("sys_getpgrp", 0x41))
queue.append(SystemCall32("sys_setsid", 0x42))
queue.append(SystemCall32("sys_sigaction", 0x43, "int sig", "const struct old_sigaction __user *act", "struct old_sigaction __user *oact"))
queue.append(SystemCall32("sys_sgetmask", 0x44))
queue.append(SystemCall32("sys_ssetmask", 0x45, "int newmask"))
queue.append(SystemCall32("sys_setreuid16", 0x46, "old_uid_t ruid", "old_uid_t euid"))
queue.append(SystemCall32("sys_setregid16", 0x47, "old_gid_t rgid", "old_gid_t egid"))
queue.append(SystemCall32("sys_sigsuspend", 0x48, "int history0", "int history1", "old_sigset_t mask"))
queue.append(SystemCall32("sys_sigpending", 0x49, "old_sigset_t __user *set"))
queue.append(SystemCall32("sys_sethostname", 0x4a, "char __user *name", "int len"))
queue.append(SystemCall32("sys_setrlimit", 0x4b, "unsigned int resource", "struct rlimit __user *rlim"))
queue.append(SystemCall32("sys_old_getrlimit", 0x4c, "unsigned int resource", "struct rlimit __user *rlim"))
queue.append(SystemCall32("sys_getrusage", 0x4d, "int who", "struct rusage __user *ru"))
queue.append(SystemCall32("sys_gettimeofday", 0x4e, "struct timeval __user *tv", "struct timezone __user *tz"))
queue.append(SystemCall32("sys_settimeofday", 0x4f, "struct timeval __user *tv", "struct timezone __user *tz"))
queue.append(SystemCall32("sys_getgroups16", 0x50, "int gidsetsize", "old_gid_t __user *grouplist"))
queue.append(SystemCall32("sys_setgroups16", 0x51, "int gidsetsize", "old_gid_t __user *grouplist"))
queue.append(SystemCall32("sys_old_select", 0x52, "struct sel_arg_struct __user *arg"))
queue.append(SystemCall32("sys_symlink", 0x53, "const char __user *old", "const char __user *new"))
queue.append(SystemCall32("sys_lstat", 0x54, "char __user *filename", "struct __old_kernel_stat __user *statbuf"))
queue.append(SystemCall32("sys_readlink", 0x55, "const char __user *path", "char __user *buf", "int bufsiz"))
queue.append(SystemCall32("sys_uselib", 0x56, "const char __user *library"))
queue.append(SystemCall32("sys_swapon", 0x57, "const char __user *specialfile", "int swap_flags"))
queue.append(SystemCall32("sys_reboot", 0x58, "int magic1", "int magic2", "unsigned int cmd", "void __user *arg"))
queue.append(SystemCall32("sys_old_readdir", 0x59, "unsigned int", "struct old_linux_dirent __user *", "unsigned int"))
queue.append(SystemCall32("sys_old_mmap", 0x5a, "struct mmap_arg_struct __user *arg"))
queue.append(SystemCall32("sys_munmap", 0x5b, "unsigned long addr", "size_t len"))
queue.append(SystemCall32("sys_truncate", 0x5c, "const char __user *path", "long length"))
queue.append(SystemCall32("sys_ftruncate", 0x5d, "unsigned int fd", "unsigned long length"))
queue.append(SystemCall32("sys_fchmod", 0x5e, "unsigned int fd", "mode_t mode"))
queue.append(SystemCall32("sys_fchown16", 0x5f, "unsigned int fd", "old_uid_t user", "old_gid_t group"))
queue.append(SystemCall32("sys_getpriority", 0x60, "int which", "int who"))
queue.append(SystemCall32("sys_setpriority", 0x61, "int which", "int who", "int niceval"))
queue.append(SystemCall32("sys_statfs", 0x63, "const char __user * path", "struct statfs __user *buf"))
queue.append(SystemCall32("sys_fstatfs", 0x64, "unsigned int fd", "struct statfs __user *buf"))
queue.append(SystemCall32("sys_ioperm", 0x65, "unsigned long", "unsigned long", "int"))
queue.append(SystemCall32("sys_socketcall", 0x66, "int call", "unsigned long __user *args"))
queue.append(SystemCall32("sys_syslog", 0x67, "int type", "char __user *buf", "int len"))
queue.append(SystemCall32("sys_setitimer", 0x68, "int which", "struct itimerval __user *value", "struct itimerval __user *ovalue"))
queue.append(SystemCall32("sys_getitimer", 0x69, "int which", "struct itimerval __user *value"))
queue.append(SystemCall32("sys_newstat", 0x6a, "char __user *filename", "struct stat __user *statbuf"))
queue.append(SystemCall32("sys_newlstat", 0x6b, "char __user *filename", "struct stat __user *statbuf"))
queue.append(SystemCall32("sys_newfstat", 0x6c, "unsigned int fd", "struct stat __user *statbuf"))
queue.append(SystemCall32("sys_uname", 0x6d, "struct old_utsname __user *"))
queue.append(SystemCall32("sys_iopl", 0x6e, "unsigned int", "struct pt_regs *"))
queue.append(SystemCall32("sys_vhangup", 0x6f))
queue.append(SystemCall32("sys_vm86old", 0x71, "struct vm86_struct __user *", "struct pt_regs *"))
queue.append(SystemCall32("sys_wait4", 0x72, "pid_t pid", "int __user *stat_addr", "int options", "struct rusage __user *ru"))
queue.append(SystemCall32("sys_swapoff", 0x73, "const char __user *specialfile"))
queue.append(SystemCall32("sys_sysinfo", 0x74, "struct sysinfo __user *info"))
queue.append(SystemCall32("sys_ipc", 0x75))
queue.append(SystemCall32("sys_fsync", 0x76, "unsigned int fd"))
queue.append(SystemCall32("sys_sigreturn", 0x77, "struct pt_regs *regs"))
queue.append(SystemCall32("sys_clone", 0x78, "unsigned long", "unsigned long", "unsigned long", "unsigned long", "struct pt_regs *"))
queue.append(SystemCall32("sys_setdomainname", 0x79, "char __user *name", "int len"))
queue.append(SystemCall32("sys_newuname", 0x7a, "struct new_utsname __user *name"))
queue.append(SystemCall32("sys_modify_ldt", 0x7b, "int", "void __user *", "unsigned long"))
queue.append(SystemCall32("sys_adjtimex", 0x7c, "struct timex __user *txc_p"))
queue.append(SystemCall32("sys_mprotect", 0x7d, "unsigned long start", "size_t len", "unsigned long prot"))
queue.append(SystemCall32("sys_sigprocmask", 0x7e, "int how", "old_sigset_t __user *set", "old_sigset_t __user *oset"))
queue.append(SystemCall32("sys_init_module", 0x80, "void __user *umod", "unsigned long len", "const char __user *uargs"))
queue.append(SystemCall32("sys_delete_module", 0x81, "const char __user *name_user", "unsigned int flags"))
queue.append(SystemCall32("sys_quotactl", 0x83, "unsigned int cmd", "const char __user *special", "qid_t id", "void __user *addr"))
queue.append(SystemCall32("sys_getpgid", 0x84, "pid_t pid"))
queue.append(SystemCall32("sys_fchdir", 0x85, "unsigned int fd"))
queue.append(SystemCall32("sys_bdflush", 0x86, "int func", "long data"))
queue.append(SystemCall32("sys_sysfs", 0x87, "int option", "unsigned long arg1", "unsigned long arg2"))
queue.append(SystemCall32("sys_personality", 0x88, "unsigned int personality"))
queue.append(SystemCall32("sys_setfsuid16", 0x8a, "old_uid_t uid"))
queue.append(SystemCall32("sys_setfsgid16", 0x8b, "old_gid_t gid"))
queue.append(SystemCall32("sys_llseek", 0x8c, "unsigned int fd", "unsigned long offset_high", "unsigned long offset_low", "loff_t __user *result", "unsigned int origin"))
queue.append(SystemCall32("sys_getdents", 0x8d, "unsigned int fd", "struct linux_dirent __user *dirent", "unsigned int count"))
queue.append(SystemCall32("sys_select", 0x8e, "int n", "fd_set __user *inp", "fd_set __user *outp", "fd_set __user *exp", "struct timeval __user *tvp"))
queue.append(SystemCall32("sys_flock", 0x8f, "unsigned int fd", "unsigned int cmd"))
queue.append(SystemCall32("sys_msync", 0x90, "unsigned long start", "size_t len", "int flags"))
queue.append(SystemCall32("sys_readv", 0x91, "unsigned long fd", "const struct iovec __user *vec", "unsigned long vlen"))
queue.append(SystemCall32("sys_writev", 0x92, "unsigned long fd", "const struct iovec __user *vec", "unsigned long vlen"))
queue.append(SystemCall32("sys_getsid", 0x93, "pid_t pid"))
queue.append(SystemCall32("sys_fdatasync", 0x94, "unsigned int fd"))
queue.append(SystemCall32("sys_sysctl", 0x95, "struct __sysctl_args __user *args"))
queue.append(SystemCall32("sys_mlock", 0x96, "unsigned long start", "size_t len"))
queue.append(SystemCall32("sys_munlock", 0x97, "unsigned long start", "size_t len"))
queue.append(SystemCall32("sys_mlockall", 0x98, "int flags"))
queue.append(SystemCall32("sys_munlockall", 0x99))
queue.append(SystemCall32("sys_sched_setparam", 0x9a, "pid_t pid", "struct sched_param __user *param"))
queue.append(SystemCall32("sys_sched_getparam", 0x9b, "pid_t pid", "struct sched_param __user *param"))
queue.append(SystemCall32("sys_sched_setscheduler", 0x9c, "pid_t pid", "int policy", "struct sched_param __user *param"))
queue.append(SystemCall32("sys_sched_getscheduler", 0x9d, "pid_t pid"))
queue.append(SystemCall32("sys_sched_yield", 0x9e))
queue.append(SystemCall32("sys_sched_get_priority_max", 0x9f, "int policy"))
queue.append(SystemCall32("sys_sched_get_priority_min", 0xa0, "int policy"))
queue.append(SystemCall32("sys_sched_rr_get_interval", 0xa1, "pid_t pid", "struct timespec __user *interval"))
queue.append(SystemCall32("sys_nanosleep", 0xa2, "struct timespec __user *rqtp", "struct timespec __user *rmtp"))
queue.append(SystemCall32("sys_mremap", 0xa3, "unsigned long addr", "unsigned long old_len", "unsigned long new_len", "unsigned long flags", "unsigned long new_addr"))
queue.append(SystemCall32("sys_setresuid16", 0xa4, "old_uid_t ruid", "old_uid_t euid", "old_uid_t suid"))
queue.append(SystemCall32("sys_getresuid16", 0xa5, "old_uid_t __user *ruid", "old_uid_t __user *euid", "old_uid_t __user *suid"))
queue.append(SystemCall32("sys_vm86", 0xa6, "unsigned long", "unsigned long", "struct pt_regs *"))
queue.append(SystemCall32("sys_poll", 0xa8, "struct pollfd __user *ufds", "unsigned int nfds", "long timeout"))
queue.append(SystemCall32("sys_nfsservctl", 0xa9, "int cmd", "struct nfsctl_arg __user *arg", "void __user *res"))
queue.append(SystemCall32("sys_setresgid16", 0xaa, "old_gid_t rgid", "old_gid_t egid", "old_gid_t sgid"))
queue.append(SystemCall32("sys_getresgid16", 0xab, "old_gid_t __user *rgid", "old_gid_t __user *egid", "old_gid_t __user *sgid"))
queue.append(SystemCall32("sys_prctl", 0xac, "int option", "unsigned long arg2", "unsigned long arg3", "unsigned long arg4", "unsigned long arg5"))
queue.append(SystemCall32("sys_rt_sigreturn", 0xad, "struct pt_regs *"))
queue.append(SystemCall32("sys_rt_sigaction", 0xae, "int sig", "const struct sigaction __user *act", "struct sigaction __user *oact", "size_t sigsetsize"))
queue.append(SystemCall32("sys_rt_sigprocmask", 0xaf, "int how", "sigset_t __user *set", "sigset_t __user *oset", "size_t sigsetsize"))
queue.append(SystemCall32("sys_rt_sigpending", 0xb0, "sigset_t __user *set", "size_t sigsetsize"))
queue.append(SystemCall32("sys_rt_sigtimedwait", 0xb1, "const sigset_t __user *uthese", "siginfo_t __user *uinfo", "const struct timespec __user *uts", "size_t sigsetsize"))
queue.append(SystemCall32("sys_rt_sigqueueinfo", 0xb2, "int pid", "int sig", "siginfo_t __user *uinfo"))
queue.append(SystemCall32("sys_rt_sigsuspend", 0xb3, "sigset_t __user *unewset", "size_t sigsetsize"))
queue.append(SystemCall32("sys_pread64", 0xb4, "unsigned int fd", "char __user *buf", "size_t count", "loff_t pos"))
queue.append(SystemCall32("sys_pwrite64", 0xb5, "unsigned int fd", "const char __user *buf", "size_t count", "loff_t pos"))
queue.append(SystemCall32("sys_chown16", 0xb6, "const char __user *filename", "old_uid_t user", "old_gid_t group"))
queue.append(SystemCall32("sys_getcwd", 0xb7, "char __user *buf", "unsigned long size"))
queue.append(SystemCall32("sys_capget", 0xb8, "cap_user_header_t header", "cap_user_data_t dataptr"))
queue.append(SystemCall32("sys_capset", 0xb9, "cap_user_header_t header", "const cap_user_data_t data"))
queue.append(SystemCall32("sys_sigaltstack", 0xba, "const stack_t __user *", "stack_t __user *", "struct pt_regs *"))
queue.append(SystemCall32("sys_sendfile", 0xbb, "int out_fd", "int in_fd", "off_t __user *offset", "size_t count"))
queue.append(SystemCall32("sys_vfork", 0xbe, "struct pt_regs *"))
queue.append(SystemCall32("sys_getrlimit", 0xbf, "unsigned int resource", "struct rlimit __user *rlim"))
queue.append(SystemCall32("sys_mmap_pgoff", 0xc0))
queue.append(SystemCall32("sys_truncate64", 0xc1, "const char __user *path", "loff_t length"))
queue.append(SystemCall32("sys_ftruncate64", 0xc2, "unsigned int fd", "loff_t length"))
queue.append(SystemCall32("sys_stat64", 0xc3, "char __user *filename", "struct stat64 __user *statbuf"))
queue.append(SystemCall32("sys_lstat64", 0xc4, "char __user *filename", "struct stat64 __user *statbuf"))
queue.append(SystemCall32("sys_fstat64", 0xc5, "unsigned long fd", "struct stat64 __user *statbuf"))
queue.append(SystemCall32("sys_lchown", 0xc6, "const char __user *filename", "uid_t user", "gid_t group"))
queue.append(SystemCall32("sys_getuid", 0xc7))
queue.append(SystemCall32("sys_getgid", 0xc8))
queue.append(SystemCall32("sys_geteuid", 0xc9))
queue.append(SystemCall32("sys_getegid", 0xca))
queue.append(SystemCall32("sys_setreuid", 0xcb, "uid_t ruid", "uid_t euid"))
queue.append(SystemCall32("sys_setregid", 0xcc, "gid_t rgid", "gid_t egid"))
queue.append(SystemCall32("sys_getgroups", 0xcd, "int gidsetsize", "gid_t __user *grouplist"))
queue.append(SystemCall32("sys_setgroups", 0xce, "int gidsetsize", "gid_t __user *grouplist"))
queue.append(SystemCall32("sys_fchown", 0xcf, "unsigned int fd", "uid_t user", "gid_t group"))
queue.append(SystemCall32("sys_setresuid", 0xd0, "uid_t ruid", "uid_t euid", "uid_t suid"))
queue.append(SystemCall32("sys_getresuid", 0xd1, "uid_t __user *ruid", "uid_t __user *euid", "uid_t __user *suid"))
queue.append(SystemCall32("sys_setresgid", 0xd2, "gid_t rgid", "gid_t egid", "gid_t sgid"))
queue.append(SystemCall32("sys_getresgid", 0xd3, "gid_t __user *rgid", "gid_t __user *egid", "gid_t __user *sgid"))
queue.append(SystemCall32("sys_chown", 0xd4, "const char __user *filename", "uid_t user", "gid_t group"))
queue.append(SystemCall32("sys_setuid", 0xd5, "uid_t uid"))
queue.append(SystemCall32("sys_setgid", 0xd6, "gid_t gid"))
queue.append(SystemCall32("sys_setfsuid", 0xd7, "uid_t uid"))
queue.append(SystemCall32("sys_setfsgid", 0xd8, "gid_t gid"))
queue.append(SystemCall32("sys_pivot_root", 0xd9, "const char __user *new_root", "const char __user *put_old"))
queue.append(SystemCall32("sys_mincore", 0xda, "unsigned long start", "size_t len", "unsigned char __user * vec"))
queue.append(SystemCall32("sys_madvise", 0xdb, "unsigned long start", "size_t len", "int behavior"))
queue.append(SystemCall32("sys_getdents64", 0xdc, "unsigned int fd", "struct linux_dirent64 __user *dirent", "unsigned int count"))
queue.append(SystemCall32("sys_fcntl64", 0xdd, "unsigned int fd", "unsigned int cmd", "unsigned long arg"))
queue.append(SystemCall32("sys_gettid", 0xe0))
queue.append(SystemCall32("sys_readahead", 0xe1, "int fd", "loff_t offset", "size_t count"))
queue.append(SystemCall32("sys_setxattr", 0xe2, "const char __user *path", "const char __user *name", "const void __user *value", "size_t size", "int flags"))
queue.append(SystemCall32("sys_lsetxattr", 0xe3, "const char __user *path", "const char __user *name", "const void __user *value", "size_t size", "int flags"))
queue.append(SystemCall32("sys_fsetxattr", 0xe4, "int fd", "const char __user *name", "const void __user *value", "size_t size", "int flags"))
queue.append(SystemCall32("sys_getxattr", 0xe5, "const char __user *path", "const char __user *name", "void __user *value", "size_t size"))
queue.append(SystemCall32("sys_lgetxattr", 0xe6, "const char __user *path", "const char __user *name", "void __user *value", "size_t size"))
queue.append(SystemCall32("sys_fgetxattr", 0xe7, "int fd", "const char __user *name", "void __user *value", "size_t size"))
queue.append(SystemCall32("sys_listxattr", 0xe8, "const char __user *path", "char __user *list", "size_t size"))
queue.append(SystemCall32("sys_llistxattr", 0xe9, "const char __user *path", "char __user *list", "size_t size"))
queue.append(SystemCall32("sys_flistxattr", 0xea, "int fd", "char __user *list", "size_t size"))
queue.append(SystemCall32("sys_removexattr", 0xeb, "const char __user *path", "const char __user *name"))
queue.append(SystemCall32("sys_lremovexattr", 0xec, "const char __user *path", "const char __user *name"))
queue.append(SystemCall32("sys_fremovexattr", 0xed, "int fd", "const char __user *name"))
queue.append(SystemCall32("sys_tkill", 0xee, "int pid", "int sig"))
queue.append(SystemCall32("sys_sendfile64", 0xef, "int out_fd", "int in_fd", "loff_t __user *offset", "size_t count"))
queue.append(SystemCall32("sys_futex", 0xf0))
queue.append(SystemCall32("sys_sched_setaffinity", 0xf1, "pid_t pid", "unsigned int len", "unsigned long __user *user_mask_ptr"))
queue.append(SystemCall32("sys_sched_getaffinity", 0xf2, "pid_t pid", "unsigned int len", "unsigned long __user *user_mask_ptr"))
queue.append(SystemCall32("sys_set_thread_area", 0xf3, "struct user_desc __user *"))
queue.append(SystemCall32("sys_get_thread_area", 0xf4, "struct user_desc __user *"))
queue.append(SystemCall32("sys_io_setup", 0xf5, "unsigned nr_reqs", "aio_context_t __user *ctx"))
queue.append(SystemCall32("sys_io_destroy", 0xf6, "aio_context_t ctx"))
queue.append(SystemCall32("sys_io_getevents", 0xf7, "aio_context_t ctx_id", "long min_nr", "long nr", "struct io_event __user *events", "struct timespec __user *timeout"))
queue.append(SystemCall32("sys_io_submit", 0xf8, "aio_context_t", "long", "struct iocb __user * __user *"))
queue.append(SystemCall32("sys_io_cancel", 0xf9, "aio_context_t ctx_id", "struct iocb __user *iocb", "struct io_event __user *result"))
queue.append(SystemCall32("sys_fadvise64", 0xfa, "int fd", "loff_t offset", "size_t len", "int advice"))
queue.append(SystemCall32("sys_exit_group", 0xfc, "int error_code"))
queue.append(SystemCall32("sys_lookup_dcookie", 0xfd, "u64 cookie64", "char __user *buf", "size_t len"))
queue.append(SystemCall32("sys_epoll_create", 0xfe, "int size"))
queue.append(SystemCall32("sys_epoll_ctl", 0xff, "int epfd", "int op", "int fd", "struct epoll_event __user *event"))
queue.append(SystemCall32("sys_epoll_wait", 0x100, "int epfd", "struct epoll_event __user *events", "int maxevents", "int timeout"))
queue.append(SystemCall32("sys_remap_file_pages", 0x101, "unsigned long start", "unsigned long size", "unsigned long prot", "unsigned long pgoff", "unsigned long flags"))
queue.append(SystemCall32("sys_set_tid_address", 0x102, "int __user *tidptr"))
queue.append(SystemCall32("sys_timer_create", 0x103, "clockid_t which_clock", "struct sigevent __user *timer_event_spec", "timer_t __user * created_timer_id"))
queue.append(SystemCall32("sys_timer_settime", 0x104, "timer_t timer_id", "int flags", "const struct itimerspec __user *new_setting", "struct itimerspec __user *old_setting"))
queue.append(SystemCall32("sys_timer_gettime", 0x105, "timer_t timer_id", "struct itimerspec __user *setting"))
queue.append(SystemCall32("sys_timer_getoverrun", 0x106, "timer_t timer_id"))
queue.append(SystemCall32("sys_timer_delete", 0x107, "timer_t timer_id"))
queue.append(SystemCall32("sys_clock_settime", 0x108, "clockid_t which_clock", "const struct timespec __user *tp"))
queue.append(SystemCall32("sys_clock_gettime", 0x109, "clockid_t which_clock", "struct timespec __user *tp"))
queue.append(SystemCall32("sys_clock_getres", 0x10a, "clockid_t which_clock", "struct timespec __user *tp"))
queue.append(SystemCall32("sys_clock_nanosleep", 0x10b, "clockid_t which_clock", "int flags", "const struct timespec __user *rqtp", "struct timespec __user *rmtp"))
queue.append(SystemCall32("sys_statfs64", 0x10c, "const char __user *path", "size_t sz", "struct statfs64 __user *buf"))
queue.append(SystemCall32("sys_fstatfs64", 0x10d, "unsigned int fd", "size_t sz", "struct statfs64 __user *buf"))
queue.append(SystemCall32("sys_tgkill", 0x10e, "int tgid", "int pid", "int sig"))
queue.append(SystemCall32("sys_utimes", 0x10f, "char __user *filename", "struct timeval __user *utimes"))
queue.append(SystemCall32("sys_fadvise64_64", 0x110, "int fd", "loff_t offset", "loff_t len", "int advice"))
queue.append(SystemCall32("sys_mbind", 0x112))
queue.append(SystemCall32("sys_get_mempolicy", 0x113, "int __user *policy", "unsigned long __user *nmask", "unsigned long maxnode", "unsigned long addr", "unsigned long flags"))
queue.append(SystemCall32("sys_set_mempolicy", 0x114, "int mode", "unsigned long __user *nmask", "unsigned long maxnode"))
queue.append(SystemCall32("sys_mq_open", 0x115, "const char __user *name", "int oflag", "mode_t mode", "struct mq_attr __user *attr"))
queue.append(SystemCall32("sys_mq_unlink", 0x116, "const char __user *name"))
queue.append(SystemCall32("sys_mq_timedsend", 0x117, "mqd_t mqdes", "const char __user *msg_ptr", "size_t msg_len", "unsigned int msg_prio", "const struct timespec __user *abs_timeout"))
queue.append(SystemCall32("sys_mq_timedreceive", 0x118, "mqd_t mqdes", "char __user *msg_ptr", "size_t msg_len", "unsigned int __user *msg_prio", "const struct timespec __user *abs_timeout"))
queue.append(SystemCall32("sys_mq_notify", 0x119, "mqd_t mqdes", "const struct sigevent __user *notification"))
queue.append(SystemCall32("sys_mq_getsetattr", 0x11a, "mqd_t mqdes", "const struct mq_attr __user *mqstat", "struct mq_attr __user *omqstat"))
queue.append(SystemCall32("sys_kexec_load", 0x11b, "unsigned long entry", "unsigned long nr_segments", "struct kexec_segment __user *segments", "unsigned long flags"))
queue.append(SystemCall32("sys_waitid", 0x11c, "int which", "pid_t pid", "struct siginfo __user *infop", "int options", "struct rusage __user *ru"))
queue.append(SystemCall32("sys_add_key", 0x11e, "const char __user *_type", "const char __user *_description", "const void __user *_payload", "size_t plen", "key_serial_t destringid"))
queue.append(SystemCall32("sys_request_key", 0x11f, "const char __user *_type", "const char __user *_description", "const char __user *_callout_info", "key_serial_t destringid"))
queue.append(SystemCall32("sys_keyctl", 0x120, "int cmd", "unsigned long arg2", "unsigned long arg3", "unsigned long arg4", "unsigned long arg5"))
queue.append(SystemCall32("sys_ioprio_set", 0x121, "int which", "int who", "int ioprio"))
queue.append(SystemCall32("sys_ioprio_get", 0x122, "int which", "int who"))
queue.append(SystemCall32("sys_inotify_init", 0x123))
queue.append(SystemCall32("sys_inotify_add_watch", 0x124, "int fd", "const char __user *path", "u32 mask"))
queue.append(SystemCall32("sys_inotify_rm_watch", 0x125, "int fd", "__s32 wd"))
queue.append(SystemCall32("sys_migrate_pages", 0x126, "pid_t pid", "unsigned long maxnode", "const unsigned long __user *from", "const unsigned long __user *to"))
queue.append(SystemCall32("sys_openat", 0x127, "int dfd", "const char __user *filename", "int flags", "int mode"))
queue.append(SystemCall32("sys_mkdirat", 0x128, "int dfd", "const char __user * pathname", "int mode"))
queue.append(SystemCall32("sys_mknodat", 0x129, "int dfd", "const char __user * filename", "int mode", "unsigned dev"))
queue.append(SystemCall32("sys_fchownat", 0x12a, "int dfd", "const char __user *filename", "uid_t user", "gid_t group", "int flag"))
queue.append(SystemCall32("sys_futimesat", 0x12b, "int dfd", "char __user *filename", "struct timeval __user *utimes"))
queue.append(SystemCall32("sys_fstatat64", 0x12c, "int dfd", "char __user *filename", "struct stat64 __user *statbuf", "int flag"))
queue.append(SystemCall32("sys_unlinkat", 0x12d, "int dfd", "const char __user * pathname", "int flag"))
queue.append(SystemCall32("sys_renameat", 0x12e, "int olddfd", "const char __user * oldname", "int newdfd", "const char __user * newname"))
queue.append(SystemCall32("sys_linkat", 0x12f, "int olddfd", "const char __user *oldname", "int newdfd", "const char __user *newname", "int flags"))
queue.append(SystemCall32("sys_symlinkat", 0x130, "const char __user * oldname", "int newdfd", "const char __user * newname"))
queue.append(SystemCall32("sys_readlinkat", 0x131, "int dfd", "const char __user *path", "char __user *buf", "int bufsiz"))
queue.append(SystemCall32("sys_fchmodat", 0x132, "int dfd", "const char __user * filename", "mode_t mode"))
queue.append(SystemCall32("sys_faccessat", 0x133, "int dfd", "const char __user *filename", "int mode"))
queue.append(SystemCall32("sys_pselect6", 0x134))
queue.append(SystemCall32("sys_ppoll", 0x135, "struct pollfd __user *ufds", "unsigned int nfds", "struct timespec __user *tsp", "const sigset_t __user *sigmask", "size_t sigsetsize"))
queue.append(SystemCall32("sys_unshare", 0x136, "unsigned long unshare_flags"))
queue.append(SystemCall32("sys_set_robust_list", 0x137, "struct robust_list_head __user *head", "size_t len"))
queue.append(SystemCall32("sys_get_robust_list", 0x138, "int pid", "struct robust_list_head __user * __user *head_ptr", "size_t __user *len_ptr"))
queue.append(SystemCall32("sys_splice", 0x139))
queue.append(SystemCall32("sys_sync_file_range", 0x13a, "int fd", "loff_t offset", "loff_t nbytes", "unsigned int flags"))
queue.append(SystemCall32("sys_tee", 0x13b, "int fdin", "int fdout", "size_t len", "unsigned int flags"))
queue.append(SystemCall32("sys_vmsplice", 0x13c, "int fd", "const struct iovec __user *iov", "unsigned long nr_segs", "unsigned int flags"))
queue.append(SystemCall32("sys_move_pages", 0x13d))
queue.append(SystemCall32("sys_getcpu", 0x13e, "unsigned __user *cpu", "unsigned __user *node", "struct getcpu_cache __user *cache"))
queue.append(SystemCall32("sys_epoll_pwait", 0x13f))
queue.append(SystemCall32("sys_utimensat", 0x140, "int dfd", "char __user *filename", "struct timespec __user *utimes", "int flags"))
queue.append(SystemCall32("sys_signalfd", 0x141, "int ufd", "sigset_t __user *user_mask", "size_t sizemask"))
queue.append(SystemCall32("sys_timerfd_create", 0x142, "int clockid", "int flags"))
queue.append(SystemCall32("sys_eventfd", 0x143, "unsigned int count"))
queue.append(SystemCall32("sys_fallocate", 0x144, "int fd", "int mode", "loff_t offset", "loff_t len"))
queue.append(SystemCall32("sys_timerfd_settime", 0x145, "int ufd", "int flags", "const struct itimerspec __user *utmr", "struct itimerspec __user *otmr"))
queue.append(SystemCall32("sys_timerfd_gettime", 0x146, "int ufd", "struct itimerspec __user *otmr"))
queue.append(SystemCall32("sys_signalfd4", 0x147, "int ufd", "sigset_t __user *user_mask", "size_t sizemask", "int flags"))
queue.append(SystemCall32("sys_eventfd2", 0x148, "unsigned int count", "int flags"))
queue.append(SystemCall32("sys_epoll_create1", 0x149, "int flags"))
queue.append(SystemCall32("sys_dup3", 0x14a, "unsigned int oldfd", "unsigned int newfd", "int flags"))
queue.append(SystemCall32("sys_pipe2", 0x14b, "int __user *fildes", "int flags"))
queue.append(SystemCall32("sys_inotify_init1", 0x14c, "int flags"))
queue.append(SystemCall32("sys_preadv", 0x14d, "unsigned long fd", "const struct iovec __user *vec", "unsigned long vlen", "unsigned long pos_l", "unsigned long pos_h"))
queue.append(SystemCall32("sys_pwritev", 0x14e, "unsigned long fd", "const struct iovec __user *vec", "unsigned long vlen", "unsigned long pos_l", "unsigned long pos_h"))
queue.append(SystemCall32("sys_rt_tgsigqueueinfo", 0x14f, "pid_t tgid", "pid_t pid", "int sig", "siginfo_t __user *uinfo"))
queue.append(SystemCall32("sys_perf_event_open", 0x150, "struct perf_event_attr __user *attr_uptr", "pid_t pid", "int cpu", "int group_fd", "unsigned long flags"))
queue.append(SystemCall32("sys_recvmmsg", 0x151, "int fd", "struct mmsghdr __user *msg", "unsigned int vlen", "unsigned flags", "struct timespec __user *timeout"))
queue.append(SystemCall64("sys_read", 0, "unsigned int fd", "char *buf", "size_t count"))
queue.append(SystemCall64("sys_write", 1, "unsigned int fd", "const char *buf", "size_t count"))
queue.append(SystemCall64("sys_open", 2, "const char *filename", "int flags", "int mode"))
queue.append(SystemCall64("sys_close", 3, "unsigned int fd"))
queue.append(SystemCall64("sys_stat", 4, "const char *filename", "struct stat *statbuf"))
queue.append(SystemCall64("sys_fstat", 5, "unsigned int fd", "struct stat *statbuf"))
queue.append(SystemCall64("sys_lstat", 6, "fconst char *filename", "struct stat *statbuf"))
queue.append(SystemCall64("sys_poll", 7, "struct poll_fd *ufds", "unsigned int nfds", "long timeout_msecs"))
queue.append(SystemCall64("sys_lseek", 8, "unsigned int fd", "off_t offset", "unsigned int origin"))
queue.append(SystemCall64("sys_mmap", 9, "unsigned long addr", "unsigned long len", "unsigned long prot", "unsigned long flags", "unsigned long fd", "unsigned long off"))
queue.append(SystemCall64("sys_mprotect", 10, "unsigned long start", "size_t len", "unsigned long prot"))
queue.append(SystemCall64("sys_munmap", 11, "unsigned long addr", "size_t len"))
queue.append(SystemCall64("sys_brk", 12, "unsigned long brk"))
queue.append(SystemCall64("sys_rt_sigaction", 13, "int sig", "const struct sigaction *act", "struct sigaction *oact", "size_t sigsetsize"))
queue.append(SystemCall64("sys_rt_sigprocmask", 14, "int how", "sigset_t *nset", "sigset_t *oset", "size_t sigsetsize"))
queue.append(SystemCall64("sys_rt_sigreturn", 15, "unsigned long __unused"))
queue.append(SystemCall64("sys_ioctl", 16, "unsigned int fd", "unsigned int cmd", "unsigned long arg"))
queue.append(SystemCall64("sys_pread64", 17, "unsigned long fd", "char *buf", "size_t count", "loff_t pos"))
queue.append(SystemCall64("sys_pwrite64", 18, "unsigned int fd", "const char *buf", "size_t count", "loff_t pos"))
queue.append(SystemCall64("sys_readv", 19, "unsigned long fd", "const struct iovec *vec", "unsigned long vlen"))
queue.append(SystemCall64("sys_writev", 20, "unsigned long fd", "const struct iovec *vec", "unsigned long vlen"))
queue.append(SystemCall64("sys_access", 21, "const char *filename", "int mode"))
queue.append(SystemCall64("sys_pipe", 22, "int *filedes"))
queue.append(SystemCall64("sys_select", 23, "int n", "fd_set *inp", "fd_set *outp", "fd_set*exp", "struct timeval *tvp"))
queue.append(SystemCall64("sys_sched_yield", 24))
queue.append(SystemCall64("sys_mremap", 25, "unsigned long addr", "unsigned long old_len", "unsigned long new_len", "unsigned long flags", "unsigned long new_addr"))
queue.append(SystemCall64("sys_msync", 26, "unsigned long start", "size_t len", "int flags"))
queue.append(SystemCall64("sys_mincore", 27, "unsigned long start", "size_t len", "unsigned char *vec"))
queue.append(SystemCall64("sys_madvise", 28, "unsigned long start", "size_t len_in", "int behavior"))
queue.append(SystemCall64("sys_shmget", 29, "key_t key", "size_t size", "int shmflg"))
queue.append(SystemCall64("sys_shmat", 30, "int shmid", "char *shmaddr", "int shmflg"))
queue.append(SystemCall64("sys_shmctl", 31, "int shmid", "int cmd", "struct shmid_ds *buf"))
queue.append(SystemCall64("sys_dup", 32, "unsigned int fildes"))
queue.append(SystemCall64("sys_dup2", 33, "unsigned int oldfd", "unsigned int newfd"))
queue.append(SystemCall64("sys_pause", 34))
queue.append(SystemCall64("sys_nanosleep", 35, "struct timespec *rqtp", "struct timespec *rmtp"))
queue.append(SystemCall64("sys_getitimer", 36, "int which", "struct itimerval *value"))
queue.append(SystemCall64("sys_alarm", 37, "unsigned int seconds"))
queue.append(SystemCall64("sys_setitimer", 38, "int which", "struct itimerval *value", "struct itimerval *ovalue"))
queue.append(SystemCall64("sys_getpid", 39))
queue.append(SystemCall64("sys_sendfile", 40, "int out_fd", "int in_fd", "off_t *offset", "size_t count"))
queue.append(SystemCall64("sys_socket", 41, "int family", "int type", "int protocol"))
queue.append(SystemCall64("sys_connect", 42, "int fd", "struct sockaddr *uservaddr", "int addrlen"))
queue.append(SystemCall64("sys_accept", 43, "int fd", "struct sockaddr *upeer_sockaddr", "int *upeer_addrlen"))
queue.append(SystemCall64("sys_sendto", 44, "int fd", "void *buff", "size_t len", "unsigned flags", "struct sockaddr *addr", "int addr_len"))
queue.append(SystemCall64("sys_recvfrom", 45, "int fd", "void *ubuf", "size_t size", "unsigned flags", "struct sockaddr *addr", "int *addr_len"))
queue.append(SystemCall64("sys_sendmsg", 46, "int fd", "struct msghdr *msg", "unsigned flags"))
queue.append(SystemCall64("sys_recvmsg", 47, "int fd", "struct msghdr *msg", "unsigned int flags"))
queue.append(SystemCall64("sys_shutdown", 48, "int fd", "int how"))
queue.append(SystemCall64("sys_bind", 49, "int fd", "struct sokaddr *umyaddr", "int addrlen"))
queue.append(SystemCall64("sys_listen", 50, "int fd", "int backlog"))
queue.append(SystemCall64("sys_getsockname", 51, "int fd", "struct sockaddr *usockaddr", "int *usockaddr_len"))
queue.append(SystemCall64("sys_getpeername", 52, "int fd", "struct sockaddr *usockaddr", "int *usockaddr_len"))
queue.append(SystemCall64("sys_socketpair", 53, "int family", "int type", "int protocol", "int *usockvec"))
queue.append(SystemCall64("sys_setsockopt", 54, "int fd", "int level", "int optname", "char *optval", "int optlen"))
queue.append(SystemCall64("sys_getsockopt", 55, "int fd", "int level", "int optname", "char *optval", "int *optlen"))
queue.append(SystemCall64("sys_clone", 56, "unsigned long clone_flags", "unsigned long newsp", "void *parent_tid", "void *child_tid"))
queue.append(SystemCall64("sys_fork", 57))
queue.append(SystemCall64("sys_vfork", 58))
queue.append(SystemCall64("sys_execve", 59, "const char *filename", "const char *const argv[]", "const char *const envp[]"))
queue.append(SystemCall64("sys_exit", 60, "int error_code"))
queue.append(SystemCall64("sys_wait4", 61, "pid_t upid", "int *stat_addr", "int options", "struct rusage *ru"))
queue.append(SystemCall64("sys_kill", 62, "pid_t pid", "int sig"))
queue.append(SystemCall64("sys_uname", 63, "struct old_utsname *name"))
queue.append(SystemCall64("sys_semget", 64, "key_t key", "int nsems", "int semflg"))
queue.append(SystemCall64("sys_semop", 65, "int semid", "struct sembuf *tsops", "unsigned nsops"))
queue.append(SystemCall64("sys_semctl", 66, "int semid", "int semnum", "int cmd", "union semun arg"))
queue.append(SystemCall64("sys_shmdt", 67, "char *shmaddr"))
queue.append(SystemCall64("sys_msgget", 68, "key_t key", "int msgflg"))
queue.append(SystemCall64("sys_msgsnd", 69, "int msqid", "struct msgbuf *msgp", "size_t msgsz", "int msgflg"))
queue.append(SystemCall64("sys_msgrcv", 70, "int msqid", "struct msgbuf *msgp", "size_t msgsz", "long msgtyp", "int msgflg"))
queue.append(SystemCall64("sys_msgctl", 71, "int msqid", "int cmd", "struct msqid_ds *buf"))
queue.append(SystemCall64("sys_fcntl", 72, "unsigned int fd", "unsigned int cmd", "unsigned long arg"))
queue.append(SystemCall64("sys_flock", 73, "unsigned int fd", "unsigned int cmd"))
queue.append(SystemCall64("sys_fsync", 74, "unsigned int fd"))
queue.append(SystemCall64("sys_fdatasync", 75, "unsigned int fd"))
queue.append(SystemCall64("sys_truncate", 76, "const char *path", "long length"))
queue.append(SystemCall64("sys_ftruncate", 77, "unsigned int fd", "unsigned long length"))
queue.append(SystemCall64("sys_getdents", 78, "unsigned int fd", "struct linux_dirent *dirent", "unsigned int count"))
queue.append(SystemCall64("sys_getcwd", 79, "char *buf", "unsigned long size"))
queue.append(SystemCall64("sys_chdir", 80, "const char *filename"))
queue.append(SystemCall64("sys_fchdir", 81, "unsigned int fd"))
queue.append(SystemCall64("sys_rename", 82, "const char *oldname", "const char *newname"))
queue.append(SystemCall64("sys_mkdir", 83, "const char *pathname", "int mode"))
queue.append(SystemCall64("sys_rmdir", 84, "const char *pathname"))
queue.append(SystemCall64("sys_creat", 85, "const char *pathname", "int mode"))
queue.append(SystemCall64("sys_link", 86, "const char *oldname", "const char *newname"))
queue.append(SystemCall64("sys_unlink", 87, "const char *pathname"))
queue.append(SystemCall64("sys_symlink", 88, "const char *oldname", "const char *newname"))
queue.append(SystemCall64("sys_readlink", 89, "const char *path", "char *buf", "int bufsiz"))
queue.append(SystemCall64("sys_chmod", 90, "const char *filename", "mode_t mode"))
queue.append(SystemCall64("sys_fchmod", 91, "unsigned int fd", "mode_t mode"))
queue.append(SystemCall64("sys_chown", 92, "const char *filename", "uid_t user", "gid_t group"))
queue.append(SystemCall64("sys_fchown", 93, "unsigned int fd", "uid_t user", "gid_t group"))
queue.append(SystemCall64("sys_lchown", 94, "const char *filename", "uid_t user", "gid_t group"))
queue.append(SystemCall64("sys_umask", 95, "int mask"))
queue.append(SystemCall64("sys_gettimeofday", 96, "struct timeval *tv", "struct timezone *tz"))
queue.append(SystemCall64("sys_getrlimit", 97, "unsigned int resource", "struct rlimit *rlim"))
queue.append(SystemCall64("sys_getrusage", 98, "int who", "struct rusage *ru"))
queue.append(SystemCall64("sys_sysinfo", 99, "struct sysinfo *info"))
queue.append(SystemCall64("sys_times", 100, "struct sysinfo *info"))
queue.append(SystemCall64("sys_ptrace", 101, "long request", "long pid", "unsigned long addr", "unsigned long data"))
queue.append(SystemCall64("sys_getuid", 102))
queue.append(SystemCall64("sys_syslog", 103, "int type", "char *buf", "int len"))
queue.append(SystemCall64("sys_getgid", 104))
queue.append(SystemCall64("sys_setuid", 105, "uid_t uid"))
queue.append(SystemCall64("sys_setgid", 106, "gid_t gid"))
queue.append(SystemCall64("sys_geteuid", 107))
queue.append(SystemCall64("sys_getegid", 108))
queue.append(SystemCall64("sys_setpgid", 109, "pid_t pid", "pid_t pgid"))
queue.append(SystemCall64("sys_getppid", 110))
queue.append(SystemCall64("sys_getpgrp", 111))
queue.append(SystemCall64("sys_setsid", 112))
queue.append(SystemCall64("sys_setreuid", 113, "uid_t ruid", "uid_t euid"))
queue.append(SystemCall64("sys_setregid", 114, "gid_t rgid", "gid_t egid"))
queue.append(SystemCall64("sys_getgroups", 115, "int gidsetsize", "gid_t *grouplist"))
queue.append(SystemCall64("sys_setgroups", 116, "int gidsetsize", "gid_t *grouplist"))
queue.append(SystemCall64("sys_setresuid", 117, "uid_t *ruid", "uid_t *euid", "uid_t *suid"))
queue.append(SystemCall64("sys_getresuid", 118, "uid_t *ruid", "uid_t *euid", "uid_t *suid"))
queue.append(SystemCall64("sys_setresgid", 119, "gid_t rgid", "gid_t egid", "gid_t sgid"))
queue.append(SystemCall64("sys_getresgid", 120, "gid_t *rgid", "gid_t *egid", "gid_t *sgid"))
queue.append(SystemCall64("sys_getpgid", 121, "pid_t pid"))
queue.append(SystemCall64("sys_setfsuid", 122, "uid_t uid"))
queue.append(SystemCall64("sys_setfsgid", 123, "gid_t gid"))
queue.append(SystemCall64("sys_getsid", 124, "pid_t pid"))
queue.append(SystemCall64("sys_capget", 125, "cap_user_header_t header", "cap_user_data_t dataptr"))
queue.append(SystemCall64("sys_capset", 126, "cap_user_header_t header", "const cap_user_data_t data"))
queue.append(SystemCall64("sys_rt_sigpending", 127, "sigset_t *set", "size_t sigsetsize"))
queue.append(SystemCall64("sys_rt_sigtimedwait", 128, "const sigset_t *uthese", "siginfo_t *uinfo", "const struct timespec *uts", "size_t sigsetsize"))
queue.append(SystemCall64("sys_rt_sigqueueinfo", 129, "pid_t pid", "int sig", "siginfo_t *uinfo"))
queue.append(SystemCall64("sys_rt_sigsuspend", 130, "sigset_t *unewset", "size_t sigsetsize"))
queue.append(SystemCall64("sys_sigaltstack", 131, "const stack_t *uss", "stack_t *uoss"))
queue.append(SystemCall64("sys_utime", 132, "char *filename", "struct utimbuf *times"))
queue.append(SystemCall64("sys_mknod", 133, "const char *filename", "umode_t mode", "unsigned dev"))
queue.append(SystemCall64("sys_uselib", 134))
queue.append(SystemCall64("sys_personality", 135, "unsigned int personality"))
queue.append(SystemCall64("sys_ustat", 136, "unsigned dev", "struct ustat *ubuf"))
queue.append(SystemCall64("sys_statfs", 137, "const char *pathname", "struct statfs *buf"))
queue.append(SystemCall64("sys_fstatfs", 138, "unsigned int fd", "struct statfs *buf"))
queue.append(SystemCall64("sys_sysfs", 139, "int option", "unsigned long arg1", "unsigned long arg2"))
queue.append(SystemCall64("sys_getpriority", 140, "int which", "int who"))
queue.append(SystemCall64("sys_setpriority", 141, "int which", "int who", "int niceval"))
queue.append(SystemCall64("sys_sched_setparam", 142, "pid_t pid", "struct sched_param *param"))
queue.append(SystemCall64("sys_sched_getparam", 143, "pid_t pid", "struct sched_param *param"))
queue.append(SystemCall64("sys_sched_setscheduler", 144, "pid_t pid", "int policy", "struct sched_param *param"))
queue.append(SystemCall64("sys_sched_getscheduler", 145, "pid_t pid"))
queue.append(SystemCall64("sys_sched_get_priority_max", 146, "int policy"))
queue.append(SystemCall64("sys_sched_get_priority_min", 147, "int policy"))
queue.append(SystemCall64("sys_sched_rr_get_interval", 148, "pid_t pid", "struct timespec *interval"))
queue.append(SystemCall64("sys_mlock", 149, "unsigned long start", "size_t len"))
queue.append(SystemCall64("sys_munlock", 150, "unsigned long start", "size_t len"))
queue.append(SystemCall64("sys_mlockall", 151, "int flags"))
queue.append(SystemCall64("sys_munlockall", 152))
queue.append(SystemCall64("sys_vhangup", 153))
queue.append(SystemCall64("sys_modify_ldt", 154, "int func", "void *ptr", "unsigned long bytecount"))
queue.append(SystemCall64("sys_pivot_root", 155, "const char *new_root", "const char *put_old"))
queue.append(SystemCall64("sys__sysctl", 156, "struct __sysctl_args *args"))
queue.append(SystemCall64("sys_prctl", 157, "int option", "unsigned long arg2", "unsigned long arg3", "unsigned long arg4", "", "unsigned long arg5"))
queue.append(SystemCall64("sys_arch_prctl", 158, "struct task_struct *task", "int code", "unsigned long *addr"))
queue.append(SystemCall64("sys_adjtimex", 159, "struct timex *txc_p"))
queue.append(SystemCall64("sys_setrlimit", 160, "unsigned int resource", "struct rlimit *rlim"))
queue.append(SystemCall64("sys_chroot", 161, "const char *filename"))
queue.append(SystemCall64("sys_sync", 162))
queue.append(SystemCall64("sys_acct", 163, "const char *name"))
queue.append(SystemCall64("sys_settimeofday", 164, "struct timeval *tv", "struct timezone *tz"))
queue.append(SystemCall64("sys_mount", 165, "char *dev_name", "char *dir_name", "char *type", "unsigned long flags", "void *data"))
queue.append(SystemCall64("sys_umount2", 166, "const char *target", "int flags"))
queue.append(SystemCall64("sys_swapon", 167, "const char *specialfile", "int swap_flags"))
queue.append(SystemCall64("sys_swapoff", 168, "const char *specialfile"))
queue.append(SystemCall64("sys_reboot", 169, "int magic1", "int magic2", "unsigned int cmd", "void *arg"))
queue.append(SystemCall64("sys_sethostname", 170, "char *name", "int len"))
queue.append(SystemCall64("sys_setdomainname", 171, "char *name", "int len"))
queue.append(SystemCall64("sys_iopl", 172, "unsigned int level", "struct pt_regs *regs"))
queue.append(SystemCall64("sys_ioperm", 173, "unsigned long from", "unsigned long num", "int turn_on"))
queue.append(SystemCall64("sys_create_module", 174, "REMOVED IN Linux 2.6"))
queue.append(SystemCall64("sys_init_module", 175, "void *umod", "unsigned long len", "const char *uargs"))
queue.append(SystemCall64("sys_delete_module", 176, "const chat *name_user", "unsigned int flags"))
queue.append(SystemCall64("sys_get_kernel_syms", 177, "REMOVED IN Linux 2.6"))
queue.append(SystemCall64("sys_query_module", 178, "REMOVED IN Linux 2.6"))
queue.append(SystemCall64("sys_quotactl", 179, "unsigned int cmd", "const char *special", "qid_t id", "void *addr"))
queue.append(SystemCall64("sys_nfsservctl", 180))
queue.append(SystemCall64("sys_getpmsg", 181))
queue.append(SystemCall64("sys_putpmsg", 182))
queue.append(SystemCall64("sys_afs_syscall", 183))
queue.append(SystemCall64("sys_tuxcall", 184))
queue.append(SystemCall64("sys_security", 185))
queue.append(SystemCall64("sys_gettid", 186))
queue.append(SystemCall64("sys_readahead", 187, "int fd", "loff_t offset", "size_t count"))
queue.append(SystemCall64("sys_setxattr", 188, "const char *pathname", "const char *name", "const void *value", "size_t size", "int flags"))
queue.append(SystemCall64("sys_lsetxattr", 189, "const char *pathname", "const char *name", "const void *value", "size_t size", "int flags"))
queue.append(SystemCall64("sys_fsetxattr", 190, "int fd", "const char *name", "const void *value", "size_t size", "int flags"))
queue.append(SystemCall64("sys_getxattr", 191, "const char *pathname", "const char *name", "void *value", "size_t size"))
queue.append(SystemCall64("sys_lgetxattr", 192, "const char *pathname", "const char *name", "void *value", "size_t size"))
queue.append(SystemCall64("sys_fgetxattr", 193, "int fd", "const har *name", "void *value", "size_t size"))
queue.append(SystemCall64("sys_listxattr", 194, "const char *pathname", "char *list", "size_t size"))
queue.append(SystemCall64("sys_llistxattr", 195, "const char *pathname", "char *list", "size_t size"))
queue.append(SystemCall64("sys_flistxattr", 196, "int fd", "char *list", "size_t size"))
queue.append(SystemCall64("sys_removexattr", 197, "const char *pathname", "const char *name"))
queue.append(SystemCall64("sys_lremovexattr", 198, "const char *pathname", "const char *name"))
queue.append(SystemCall64("sys_fremovexattr", 199, "int fd", "const char *name"))
queue.append(SystemCall64("sys_tkill", 200, "pid_t pid", "ing sig"))
queue.append(SystemCall64("sys_time", 201, "time_t *tloc"))
queue.append(SystemCall64("sys_futex", 202, "u32 *uaddr", "int op", "u32 val", "struct timespec *utime", "u32 *uaddr2", "u32 val3"))
queue.append(SystemCall64("sys_sched_setaffinity", 203, "pid_t pid", "unsigned int len", "unsigned long *user_mask_ptr"))
queue.append(SystemCall64("sys_sched_getaffinity", 204, "pid_t pid", "unsigned int len", "unsigned long *user_mask_ptr"))
queue.append(SystemCall64("sys_io_setup", 206, "unsigned nr_events", "aio_context_t *ctxp"))
queue.append(SystemCall64("sys_io_destroy", 207, "aio_context_t ctx"))
queue.append(SystemCall64("sys_io_getevents", 208, "aio_context_t ctx_id", "long min_nr", "long nr", "struct io_event *events"))
queue.append(SystemCall64("sys_io_submit", 209, "aio_context_t ctx_id", "long nr", "struct iocb **iocbpp"))
queue.append(SystemCall64("sys_io_cancel", 210, "aio_context_t ctx_id", "struct iocb *iocb", "struct io_event *result"))
queue.append(SystemCall64("sys_lookup_dcookie", 212, "u64 cookie64", "long buf", "long len"))
queue.append(SystemCall64("sys_epoll_create", 213, "int size"))
queue.append(SystemCall64("sys_epoll_ctl_old", 214))
queue.append(SystemCall64("sys_epoll_wait_old", 215))
queue.append(SystemCall64("sys_remap_file_pages", 216, "unsigned long start", "unsigned long size", "unsigned long prot", "unsigned long pgoff", "unsigned long flags"))
queue.append(SystemCall64("sys_getdents64", 217, "unsigned int fd", "struct linux_dirent64 *dirent", "unsigned int count"))
queue.append(SystemCall64("sys_set_tid_address", 218, "int *tidptr"))
queue.append(SystemCall64("sys_restart_syscall", 219))
queue.append(SystemCall64("sys_semtimedop", 220, "int semid", "struct sembuf *tsops", "unsigned nsops", "const struct timespec *timeout"))
queue.append(SystemCall64("sys_fadvise64", 221, "int fd", "loff_t offset", "size_t len", "int advice"))
queue.append(SystemCall64("sys_timer_create", 222, "const clockid_t which_clock", "struct sigevent *timer_event_spec", "timer_t *created_timer_id"))
queue.append(SystemCall64("sys_timer_settime", 223, "timer_t timer_id", "int flags", "const struct itimerspec *new_setting", "struct itimerspec *old_setting"))
queue.append(SystemCall64("sys_timer_gettime", 224, "timer_t timer_id", "struct itimerspec *setting"))
queue.append(SystemCall64("sys_timer_getoverrun", 225, "timer_t timer_id"))
queue.append(SystemCall64("sys_timer_delete", 226, "timer_t timer_id"))
queue.append(SystemCall64("sys_clock_settime", 227, "const clockid_t which_clock", "const struct timespec *tp"))
queue.append(SystemCall64("sys_clock_gettime", 228, "const clockid_t which_clock", "struct timespec *tp"))
queue.append(SystemCall64("sys_clock_getres", 229, "const clockid_t which_clock", "struct timespec *tp"))
queue.append(SystemCall64("sys_clock_nanosleep", 230, "const clockid_t which_clock", "int flags", "const struct timespec *rqtp", "struct timespec *rmtp"))
queue.append(SystemCall64("sys_exit_group", 231, "int error_code"))
queue.append(SystemCall64("sys_epoll_wait", 232, "int epfd", "struct epoll_event *events", "int maxevents", "int timeout"))
queue.append(SystemCall64("sys_epoll_ctl", 233, "int epfd", "int op", "int fd", "struct epoll_event *event"))
queue.append(SystemCall64("sys_tgkill", 234, "pid_t tgid", "pid_t pid", "int sig"))
queue.append(SystemCall64("sys_utimes", 235, "char *filename", "struct timeval *utimes"))
queue.append(SystemCall64("sys_vserver", 236))
queue.append(SystemCall64("sys_mbind", 237, "unsigned long start", "unsigned long len", "unsigned long mode", "unsigned long *nmask", "unsigned long maxnode", "unsigned flags"))
queue.append(SystemCall64("sys_set_mempolicy", 238, "int mode", "unsigned long *nmask", "unsigned long maxnode"))
queue.append(SystemCall64("sys_get_mempolicy", 239, "int *policy", "unsigned long *nmask", "unsigned long maxnode", "unsigned long addr", "unsigned long flags"))
queue.append(SystemCall64("sys_mq_open", 240, "const char *u_name", "int oflag", "mode_t mode", "struct mq_attr *u_attr"))
queue.append(SystemCall64("sys_mq_unlink", 241, "const char *u_name"))
queue.append(SystemCall64("sys_mq_timedsend", 242, "mqd_t mqdes", "const char *u_msg_ptr", "size_t msg_len", "unsigned int msg_prio", "const stuct timespec *u_abs_timeout"))
queue.append(SystemCall64("sys_mq_timedreceive", 243, "mqd_t mqdes", "char *u_msg_ptr", "size_t msg_len", "unsigned int *u_msg_prio", "const struct timespec *u_abs_timeout"))
queue.append(SystemCall64("sys_mq_notify", 244, "mqd_t mqdes", "const struct sigevent *u_notification"))
queue.append(SystemCall64("sys_mq_getsetattr", 245, "mqd_t mqdes", "const struct mq_attr *u_mqstat", "struct mq_attr *u_omqstat"))
queue.append(SystemCall64("sys_kexec_load", 246, "unsigned long entry", "unsigned long nr_segments", "struct kexec_segment *segments", "unsigned long flags"))
queue.append(SystemCall64("sys_waitid", 247, "int which", "pid_t upid", "struct siginfo *infop", "int options", "struct rusage *ru"))
queue.append(SystemCall64("sys_add_key", 248, "const char *_type", "const char *_description", "const void *_payload", "size_t plen"))
queue.append(SystemCall64("sys_request_key", 249, "const char *_type", "const char *_description", "const char *_callout_info", "key_serial_t destringid"))
queue.append(SystemCall64("sys_keyctl", 250, "int option", "unsigned long arg2", "unsigned long arg3", "unsigned long arg4", "unsigned long arg5"))
queue.append(SystemCall64("sys_ioprio_set", 251, "int which", "int who", "int ioprio"))
queue.append(SystemCall64("sys_ioprio_get", 252, "int which", "int who"))
queue.append(SystemCall64("sys_inotify_init", 253))
queue.append(SystemCall64("sys_inotify_add_watch", 254, "int fd", "const char *pathname", "u32 mask"))
queue.append(SystemCall64("sys_inotify_rm_watch", 255, "int fd", "__s32 wd"))
queue.append(SystemCall64("sys_migrate_pages", 256, "pid_t pid", "unsigned long maxnode", "const unsigned long *old_nodes", "const unsigned long *new_nodes"))
queue.append(SystemCall64("sys_openat", 257, "int dfd", "const char *filename", "int flags", "int mode"))
queue.append(SystemCall64("sys_mkdirat", 258, "int dfd", "const char *pathname", "int mode"))
queue.append(SystemCall64("sys_mknodat", 259, "int dfd", "const char *filename", "int mode", "unsigned dev"))
queue.append(SystemCall64("sys_fchownat", 260, "int dfd", "const char *filename", "uid_t user", "gid_t group", "int flag"))
queue.append(SystemCall64("sys_futimesat", 261, "int dfd", "const char *filename", "struct timeval *utimes"))
queue.append(SystemCall64("sys_newfstatat", 262, "int dfd", "const char *filename", "struct stat *statbuf", "int flag"))
queue.append(SystemCall64("sys_unlinkat", 263, "int dfd", "const char *pathname", "int flag"))
queue.append(SystemCall64("sys_renameat", 264, "int oldfd", "const char *oldname", "int newfd", "const char *newname"))
queue.append(SystemCall64("sys_linkat", 265, "int oldfd", "const char *oldname", "int newfd", "const char *newname", "int flags"))
queue.append(SystemCall64("sys_symlinkat", 266, "const char *oldname", "int newfd", "const char *newname"))
queue.append(SystemCall64("sys_readlinkat", 267, "int dfd", "const char *pathname", "char *buf", "int bufsiz"))
queue.append(SystemCall64("sys_fchmodat", 268, "int dfd", "const char *filename", "mode_t mode"))
queue.append(SystemCall64("sys_faccessat", 269, "int dfd", "const char *filename", "int mode"))
queue.append(SystemCall64("sys_pselect6", 270, "int n", "fd_set *inp", "fd_set *outp", "fd_set *exp", "struct timespec *tsp", "void *sig"))
queue.append(SystemCall64("sys_ppoll", 271, "struct pollfd *ufds", "unsigned int nfds", "struct timespec *tsp", "const sigset_t *sigmask", "size_t sigsetsize"))
queue.append(SystemCall64("sys_unshare", 272, "unsigned long unshare_flags"))
queue.append(SystemCall64("sys_set_robust_list", 273, "struct robust_list_head *head", "size_t len"))
queue.append(SystemCall64("sys_get_robust_list", 274, "int pid", "struct robust_list_head **head_ptr", "size_t *len_ptr"))
queue.append(SystemCall64("sys_splice", 275, "int fd_in", "loff_t *off_in", "int fd_out", "loff_t *off_out", "size_t len", "unsigned int flags"))
queue.append(SystemCall64("sys_tee", 276, "int fdin", "int fdout", "size_t len", "unsigned int flags"))
queue.append(SystemCall64("sys_sync_file_range", 277, "long fd", "loff_t offset", "loff_t bytes", "long flags"))
queue.append(SystemCall64("sys_vmsplice", 278, "int fd", "const struct iovec *iov", "unsigned long nr_segs", "unsigned int flags"))
queue.append(SystemCall64("sys_move_pages", 279, "pid_t pid", "unsigned long nr_pages", "const void **pages", "const int *nodes", "int *status", "int flags"))
queue.append(SystemCall64("sys_utimensat", 280, "int dfd", "const char *filename", "struct timespec *utimes", "int flags"))
queue.append(SystemCall64("sys_epoll_pwait", 281, "int epfd", "struct epoll_event *events", "int maxevents", "int timeout", "const sigset_t *sigmask", "size_t sigsetsize"))
queue.append(SystemCall64("sys_signalfd", 282, "int ufd", "sigset_t *user_mask", "size_t sizemask"))
queue.append(SystemCall64("sys_timerfd_create", 283, "int clockid", "int flags"))
queue.append(SystemCall64("sys_eventfd", 284, "unsigned int count"))
queue.append(SystemCall64("sys_fallocate", 285, "long fd", "long mode", "loff_t offset", "loff_t len"))
queue.append(SystemCall64("sys_timerfd_settime", 286, "int ufd", "int flags", "const struct itimerspec *utmr", "struct itimerspec *otmr"))
queue.append(SystemCall64("sys_timerfd_gettime", 287, "int ufd", "struct itimerspec *otmr"))
queue.append(SystemCall64("sys_accept4", 288, "int fd", "struct sockaddr *upeer_sockaddr", "int *upeer_addrlen", "int flags"))
queue.append(SystemCall64("sys_signalfd4", 289, "int ufd", "sigset_t *user_mask", "size_t sizemask", "int flags"))
queue.append(SystemCall64("sys_eventfd2", 290, "unsigned int count", "int flags"))
queue.append(SystemCall64("sys_epoll_create1", 291, "int flags"))
queue.append(SystemCall64("sys_dup3", 292, "unsigned int oldfd", "unsigned int newfd", "int flags"))
queue.append(SystemCall64("sys_pipe2", 293, "int *filedes", "int flags"))
queue.append(SystemCall64("sys_inotify_init1", 294, "int flags"))
queue.append(SystemCall64("sys_preadv", 295, "unsigned long fd", "const struct iovec *vec", "unsigned long vlen", "unsigned long pos_l", "unsigned long pos_h"))
queue.append(SystemCall64("sys_pwritev", 296, "unsigned long fd", "const struct iovec *vec", "unsigned long vlen", "unsigned long pos_l", "unsigned long pos_h"))
queue.append(SystemCall64("sys_rt_tgsigqueueinfo", 297, "pid_t tgid", "pid_t pid", "int sig", "siginfo_t *uinfo"))
queue.append(SystemCall64("sys_perf_event_open", 298, "struct perf_event_attr *attr_uptr", "pid_t pid", "int cpu", "int group_fd", "unsigned long flags"))
queue.append(SystemCall64("sys_recvmmsg", 299, "int fd", "struct msghdr *mmsg", "unsigned int vlen", "unsigned int flags", "struct timespec *timeout"))
queue.append(SystemCall64("sys_fanotify_init", 300, "unsigned int flags", "unsigned int event_f_flags"))
queue.append(SystemCall64("sys_fanotify_mark", 301, "long fanotify_fd", "long flags", "__u64 mask", "long dfd", "long pathname"))
queue.append(SystemCall64("sys_prlimit64", 302, "pid_t pid", "unsigned int resource", "const struct rlimit64 *new_rlim", "struct rlimit64 *old_rlim"))
queue.append(SystemCall64("sys_name_to_handle_at", 303, "int dfd", "const char *name", "struct file_handle *handle", "int *mnt_id", "int flag"))
queue.append(SystemCall64("sys_open_by_handle_at", 304, "int dfd", "const char *name", "struct file_handle *handle", "int *mnt_id", "int flags"))
queue.append(SystemCall64("sys_clock_adjtime", 305, "clockid_t which_clock", "struct timex *tx"))
queue.append(SystemCall64("sys_syncfs", 306, "int fd"))
queue.append(SystemCall64("sys_sendmmsg", 307, "int fd", "struct mmsghdr *mmsg", "unsigned int vlen", "unsigned int flags"))
queue.append(SystemCall64("sys_setns", 308, "int fd", "int nstype"))
queue.append(SystemCall64("sys_getcpu", 309, "unsigned *cpup", "unsigned *nodep", "struct getcpu_cache *unused"))
queue.append(SystemCall64("sys_process_vm_readv", 310, "pid_t pid", "const struct iovec *lvec", "unsigned long liovcnt", "const struct iovec *rvec", "unsigned long riovcnt", "unsigned long flags"))
queue.append(SystemCall64("sys_process_vm_writev", 311, "pid_t pid", "const struct iovec *lvec", "unsigned long liovcnt", "const struct iovcc *rvec", "unsigned long riovcnt", "unsigned long flags"))
queue.append(SystemCall64("sys_kcmp", 312, "pid_t pid1", "pid_t pid2", "int type", "unsigned long idx1", "unsigned long idx2"))
queue.append(SystemCall64("sys_finit_module", 313, "int fd", "const char __user *uargs", "int flags"))
queue.append(SystemCall64("sys_sched_setattr", 314, "pid_t pid", "struct sched_attr __user *attr", "unsigned int flags"))
queue.append(SystemCall64("sys_sched_getattr", 315, "pid_t pid", "struct sched_attr __user *attr", "unsigned int size", "unsigned int flags"))
queue.append(SystemCall64("sys_renameat2", 316, "int olddfd", "const char __user *oldname", "int newdfd", "const char __user *newname", "unsigned int flags"))
queue.append(SystemCall64("sys_seccomp", 317, "unsigned int op", "unsigned int flags", "const char __user *uargs"))
queue.append(SystemCall64("sys_getrandom", 318, "char __user *buf", "size_t count", "unsigned int flags"))
queue.append(SystemCall64("sys_memfd_create", 319, "const char __user *uname_ptr", "unsigned int flags"))
queue.append(SystemCall64("sys_kexec_file_load", 320, "int kernel_fd", "int initrd_fd", "unsigned long cmdline_len", "const char __user *cmdline_ptr", "unsigned long flags"))
queue.append(SystemCall64("sys_bpf", 321, "int cmd", "union bpf_attr *attr", "unsigned int size"))
queue.append(SystemCall64("sys_stub_execveat", 322, "int dfd", "const char __user *filename", "const char __user *const __user *argv", "const char __user *const __user *envp", "int flags"))
queue.append(SystemCall64("sys_userfaultfd", 323, "int flags"))
queue.append(SystemCall64("sys_membarrier", 324, "int cmd", "int flags"))
queue.append(SystemCall64("sys_mlock2", 325, "unsigned long start", "size_t len", "int flags"))
queue.append(SystemCall64("sys_copy_file_range", 326, "int fd_in", "loff_t __user *off_in", "int fd_out", "loff_t __user * off_out", "size_t len", "unsigned int flags"))
queue.append(SystemCall64("sys_preadv2", 327, "unsigned long fd", "const struct iovec __user *vec", "unsigned long vlen", "unsigned long pos_l", "unsigned long pos_h", "int flags"))
queue.append(SystemCall64("sys_pwritev2", 328, "unsigned long fd", "const struct iovec __user *vec", "unsigned long vlen", "unsigned long pos_l", "unsigned long pos_h", "int flags"))


if len(sys.argv) <= 1:
    print('Usage: syscall <syscall_name>')
    sys.exit(1)

name = sys.argv[1]
first = False
for system_call in queue:
    if name == system_call.get_name() or 'sys_' + name == system_call.get_name():
        print(system_call)
