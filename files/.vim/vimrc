" Vim Configuration File
"        _
"       (_)
" __   ___ _ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|

" Global settings {{{

" Reset all autocmds (useful for sourcing $MYVIMRC" multiple times)
autocmd!

" Set the <leader> to ","
let mapleader=","

" spell-check set to F6
map <F6> :setlocal spell! spelllang=en_au<CR>

" Toggle the grey bar thing
map <silent> <F8> :call g:ToggleCC(79)<CR>
syntax enable
syntax on

set t_Co=256
set background=dark
colorscheme gruvbox

set shiftwidth=2
set numberwidth=4
set smartindent
set autoindent
set showcmd
set wildmenu

" The width of tab characters
set tabstop=4

" Activate filetype detection
filetype on

" Helpful when pasting with older versions of vim
"set paste

" Display current line number
set number

" Why are your numbers weird?
set relativenumber

" Spaces (not tabs), except in Makefiles
set expandtab

" Disable error bell
"set belloff=all

" Leave 3 lines above/below cursor
set scrolloff=3

" Highlight current line
set cursorline

" Ignoring case when searching
"set ignorecase

" Force statusline to always be displayed
set laststatus=2

" How to fold stuff
set foldmethod=syntax

" No folds when opening buffer
set foldlevelstart=99

" Shows the tabs
set list listchars=tab:>-

" Search recursivly up the directory tree to find tags files (for ctags)
set tags=./tags;/

" Don't read modeline strings
set nomodeline

" When using the `find' command search recursively down
"set path=**

" ???
set backspace=indent,eol,start
set backspace=2

" Make the status line
set statusline=%r   " Is modifiable
set statusline+=\   " <space>
set statusline+=%f  " File name
set statusline+=\   " <space>
set statusline+=%y  " File type
set statusline+=%=  " Switch to right side
set statusline+=%l  " Current line
set statusline+=/   " Seperator
set statusline+=%L  " Total lines
set statusline+=\   " <space>
set statusline+=(%p " Percentage through file
set statusline+=%%) " Percent sign
set statusline+=\   " <space>

" add any database in current directory
if filereadable("cscope.out")
    cs add cscope.out
endif

" }}}

" Function mappings -------------------- {{{

" Edit + reload vimrc anytime
nnoremap <leader>ev :tabnew $MYVIMRC<CR>
nnoremap <leader>rv :source $MYVIMRC<CR>

" Duplicate current line
nnoremap <leader>p Vyp
inoremap <leader>p <esc>Vyp

" Useless help menu is mapped to <esc>
nnoremap <F1> <esc>
inoremap <F1> <esc>

" <space>, <enter> and <backspace> keys that actually work
nnoremap <cr> o<esc>
nnoremap <space> i<space><esc>l

" Yank/paste to the system keyboard
vnoremap Y :'<,'>:w !xclip -selection clip <CR><CR>
nnoremap P :r !xclip -selection clip -out<CR>

" Convert word to upper case, not recursive
inoremap <c-u> <esc>mxviwu`xa
nnoremap <c-u> <esc>mxviwu`x

" Comments a chunk of text
vnoremap <leader>c :call g:ToggleComments()<CR>

" save and quit
inoremap <leader>q <esc>:q<CR>
nnoremap <leader>q :q<CR>
inoremap <leader>wq <esc>:wq<CR>
nnoremap <leader>wq :wq<CR>

inoremap <leader>w <esc>:w<CR>a
nnoremap <leader>w :w<CR>

inoremap <leader>u <esc>mxviwu`xa
nnoremap <leader>u <esc>mxviwu`x

nnoremap <silent> <C-p> :tabp<CR>
nnoremap <silent> <C-n> :tabN<CR>

" Find the file, look recursibly
nnoremap <leader>f :cscope find f<space>

" Find functions calling this function
nnoremap <leader>C :cscope find c<space>

" maps "WQ" to ":wq"
command! -nargs=* WQ  :wq <args>
command! -nargs=* Wq  :wq <args>
command! -nargs=* W   :w <args>
command! -nargs=* Q   :q <args>
command! -nargs=* Vsp :vsp <args>
command! -nargs=* VSp :vsp <args>
command! -nargs=* VSP :vsp <args>
command! -nargs=* Sp  :sp <args>
command! -nargs=* SP  :sp <args>

" If the 'rxvt' is a substring of $TERM
" Make sure we are not on the CSE machines
if tolower ($TERM) =~ "rxvt" && $USER !=? "z5210220"
  let &t_SI = "\<Esc>[6 q"
  let &t_SR = "\<Esc>[4 q"
  let &t_EI = "\<Esc>[2 q"
endif


" Turn on hlsearch when searching
" Turn it off in insert mode
nnoremap / :setlocal hlsearch<cr>/
nnoremap ? :setlocal hlsearch<cr>?
nnoremap n :setlocal hlsearch<cr>n
nnoremap N :setlocal hlsearch<cr>N
nnoremap # :setlocal hlsearch<cr>#
nnoremap * :setlocal hlsearch<cr>*
autocmd InsertEnter * setlocal nohlsearch

autocmd VimEnter * echo "\"Talk is cheap. Show me the code\" - Linus Torvalds."

"}}}

" File initilisation ---------------------- {{{
" Skeletons
autocmd BufNewFile *.c          0r ~/.vim/templates/c.skel
autocmd BufNewFile *.cpp        0r ~/.vim/templates/cpp.skel
autocmd BufNewFile Makefile     0r ~/.vim/templates/make.skel
autocmd BufNewFile *.sh         0r ~/.vim/templates/bash.skel
autocmd BufNewFile *.rmd        0r ~/.vim/templates/rmd.skel
autocmd BufNewFile *.html       0r ~/.vim/templates/html.skel
autocmd BufNewFile *.py         0r ~/.vim/templates/py.skel
autocmd BufNewFile *.pl         0r ~/.vim/templates/prolog.skel
autocmd BufNewFile *.js         0r ~/.vim/templates/js.skel

" ==DATE==  Current date
" ==NAME==  Authors name
" ==START== Starting cursor position
autocmd BufNewFile * %substitute/==DATE==/\=substitute(system('date +"%x %k:%M"'),'\n','','g')/eg
autocmd BufNewFile * %substitute/==NAME==/Jarrod Cameron (z5210220)/eg
autocmd BufNewFile * %substitute/==START==//eg
" }}}

" Bonus features (plugins) {{{

source ~/.vim/features/brackets.vim
source ~/.vim/features/smarttabs.vim

" }}}

" Saving buffers ---------------------- {{{
" Remove any trailing white space
autocmd BufWritePre * %substitute/\s\+$//e

" Refresh program after saving config file
autocmd BufWritePost $MYVIMRC source $MYVIMRC
autocmd BufWritePost ~/.dotfiles/files/.Xresources silent: !xrdb .Xresources
autocmd BufWritePost ~/.dotfiles/files/i3/config silent :!i3-msg restart
autocmd BufWritePost ~/.dotfiles/files/i3blocks/config silent: !i3-msg restart
"autocmd BufWritePost ~/.config/compton/config silent: !killall compton 2>/dev/null; compton --config ~/.config/compton/config &

" Vim jumps to the last position when reopening a file
"autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" }}}"

" Custom file settings ---------------------- {{{
autocmd FileType rmd command! R :w | :!clear && Rscript -e "rmarkdown::render('%')" && xdg-open %<.pdf
autocmd FileType rmd command! C :w | :!clear && Rscript -e "rmarkdown::render('%')"
autocmd FileType rmd command! O :!clear && xdg-open %<.pdf
autocmd FileType rmd iabbrev tbf textbf
autocmd FileType rmd iabbrev tit textit
autocmd FileType text setlocal spell spelllang=en_au

autocmd FileType python command! R :w ! :!clear && python %

autocmd FileType html command! R :w | :!google-chrome --new-window %
autocmd FileType html setlocal cursorcolumn

autocmd FileType tex command! C :w | :!clear && pdflatex %
autocmd FileType tex command! R :w | !clear && pdflatex % && xdg-open %<.pdf

autocmd FileType c iabbrev <buffer> \N \n
autocmd FileType c iabbrev <buffer> \m \n
autocmd FileType c iabbrev <buffer> struc struct
autocmd FileType c command! Dcheck :%s/check();\n//g

autocmd FileType text setlocal spell spelllang=en_au

autocmd FileType make setlocal noexpandtab

autocmd FileType vim setlocal foldmethod=marker
autocmd FileType vim normal zM
" }}}

" Brackets stuff ---------------------- {{{
"inoremap {<CR> {<CR>}<esc>O
"inoremap [<CR> [<CR>]<esc>O<space><space><space><space>
"inoremap (<CR> (<CR>)<esc>O<space><space><space><space>
"
"inoremap {;<CR> {<CR>};<esc>O
"inoremap [;<CR> [<CR>];<esc>O<space><space><space><space>
"inoremap (;<CR> (<CR>);<esc>O<space><space><space><space>
"
"vnoremap <leader>c :call g:ToggleComments()<CR>
"
"inoremap ( (<esc>:call g:InsertOpenBracket('(', ')')<CR>a
"inoremap { {}<left>
"inoremap [ []<left>
"inoremap ( ()<left>
"
"inoremap } }<esc>:call g:InsertPair("}")<CR>a
"inoremap ] ]<esc>:call g:InsertPair("]")<CR>a
"inoremap ) )<esc>:call g:InsertPair(")")<CR>a
" }}}

" Kindergarten spelling skills ---------------------- {{{
iabbrev tehn then
iabbrev didnt didn't
iabbrev dont don't
iabbrev waht what
iabbrev wehn when
iabbrev wont won't
iabbrev teh the
iabbrev adn and
iabbrev si is
iabbrev nad and
iabbrev ifle file
iabbrev im I'm
iabbrev sel4 seL4_
" }}}

" vimscript functions  ---------------------- {{{
" Toggle the vertical bar
function! g:ToggleCC(width)
  if &cc == 0
    execute "set colorcolumn=".a:width
  else
    set colorcolumn=0
  endif
endfunction

" Return the comment per filetype
function! s:GetComment()
  if &filetype == "vim"
    return "\""
  elseif &filetype == "c" || &filetype == "javascript"
    return "\\/\\/"
  elseif &filetype == "prolog"
    return "%"
  elseif &filetype == "xdefaults"
    return "!"
  else
    " Default comment type
    return "#"
  endif
endfunction

" Toggle comments
function! g:ToggleComments() range
  let l:comment_type=s:GetComment()
  let l:is_commented=1
  for l:line_num in range(a:firstline, a:lastline)
    let l:line = getline(l:line_num)
    let l:regexp = "^\\s*" . l:comment_type
    if l:line !~ l:regexp
      let l:cmd = string(l:line_num) . "s/^/" . l:comment_type . "/"
      execute l:cmd
      let l:is_commented=0
    endif
  endfor
  if l:is_commented == 1
    let l:range = string(a:firstline) . "," . string (a:lastline)
    let l:subs = "s/" . l:comment_type . "//"
    let l:cmd = l:range . l:subs
    execute l:cmd
  endif
endfunction

" Insert closing bracket
"function! g:InsertPair(bracket)
"  if col("$") == 1 || col(".") == col("$")-1
"    return
"  endif
"  if getline(".")[col(".")] == a:bracket
"    execute "normal! x"
"  endif
"endfunction

" }}}
