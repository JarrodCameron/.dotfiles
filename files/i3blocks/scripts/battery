#!/usr/bin/env bash

# Author: Jarrod Cameron (z5210220)

# Given two points (`min` and `max`) and a level return 
#   the correct value.
# Math is fron:
#   https://stackoverflow.com/questions/21835739/smooth-color-transition-algorithm
get_val () {
  python3 -c "
max_val = "$1"
min_val = "$2"
level = "$3"
# Only 100 possible battery levels
width = 100
gradient = ( max_val - min_val ) / width
final = gradient * level + min_val
print (int (final))"
}

# When fully charged the module will be `max_color`
# When no battery is remaining module will be `min_color`
# Depending on current battery level color will be in between
#   max_color and min_color
max_color="00FF00" # Green
min_color="FF0000" # Red
get_color () {

  # Battery level
  level=$(sed 's/%//g' <<< "$bat")

  # Generate red position
  max="0x""${max_color:0:2}"
  min="0x""${min_color:0:2}"
  red=$(get_val "$max" "$min" "$level")

  # Generate green position
  max="0x""${max_color:2:2}"
  min="0x""${min_color:2:2}"
  green=$(get_val "$max" "$min" "$level")

  # Generate blue position
  max="0x""${max_color:4:2}"
  min="0x""${min_color:4:2}"
  blue=$(get_val "$max" "$min" "$level")

  # Return final color
  # Add leading zeros
  printf "%02X%02X%02X\n" "$red" "$green" "$blue"

}

# Remaining battery level
bat=$(acpi | awk '/^Battery 0/ {print $4}' | sed 's/,//g')

if [ !  -z "$(acpi | grep "Charging")" ]; then
  echo "Charging: $bat" # Long text
  echo "Chr: $bat"      # Short text
else
  echo "Battery: $bat" # Long text
  echo "Bat: $bat"     # Short text
fi

echo \#$(get_color)

